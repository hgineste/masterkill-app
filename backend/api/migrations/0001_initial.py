# Generated by Django 5.2.1 on 2025-05-18 10:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Gage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, unique=True, verbose_name='Texte du gage')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
            ],
            options={
                'verbose_name': 'Gage',
                'verbose_name_plural': 'Gages',
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gamertag', models.CharField(max_length=100, unique=True, verbose_name='Pseudo du joueur')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
            ],
            options={
                'verbose_name': 'Joueur',
                'verbose_name_plural': 'Joueurs',
                'ordering': ['gamertag'],
            },
        ),
        migrations.CreateModel(
            name='MasterkillEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Nouveau Masterkill', max_length=150, verbose_name='Nom du Masterkill')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('effective_start_at', models.DateTimeField(blank=True, null=True, verbose_name='Début effectif')),
                ('ended_at', models.DateTimeField(blank=True, null=True, verbose_name='Fin')),
                ('points_kill', models.IntegerField(default=1, verbose_name='Points par Kill')),
                ('points_rea', models.IntegerField(default=1, verbose_name='Points par Réanimation')),
                ('points_redeploiement', models.IntegerField(default=-1, verbose_name='Points par Redéploiement')),
                ('points_goulag_win', models.IntegerField(default=1, verbose_name='Points par Goulag gagné')),
                ('points_rage_quit', models.IntegerField(default=-5, verbose_name='Points par Rage Quit')),
                ('points_execution', models.IntegerField(default=1, verbose_name='Points par Exécution')),
                ('points_humiliation', models.IntegerField(default=-1, verbose_name='Points par Humiliation subie')),
                ('num_games_planned', models.PositiveIntegerField(default=3, verbose_name='Nombre de parties prévues')),
                ('top1_solo_ends_mk', models.BooleanField(default=False, help_text='Un Top 1 solo met fin au MK ?', verbose_name='Top 1 Solo termine le MK')),
                ('has_bonus_reel', models.BooleanField(default=True, verbose_name='Roue des Bonus activée')),
                ('has_kill_multipliers', models.BooleanField(default=False, verbose_name='Multiplicateurs de Kills activés')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('inprogress', 'En cours'), ('paused', 'En Pause'), ('completed', 'Terminé'), ('cancelled', 'Annulé')], default='pending', max_length=20, verbose_name='Statut')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_masterkills', to=settings.AUTH_USER_MODEL, verbose_name='Créateur')),
                ('participants', models.ManyToManyField(blank=True, related_name='masterkill_events_participated', to=settings.AUTH_USER_MODEL, verbose_name='Participants')),
                ('selected_gage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.gage', verbose_name='Gage sélectionné')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='masterkills_won', to=settings.AUTH_USER_MODEL, verbose_name='Vainqueur')),
            ],
            options={
                'verbose_name': 'Événement Masterkill',
                'verbose_name_plural': 'Événements Masterkill',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_number', models.PositiveIntegerField(verbose_name='Numéro de la partie')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('inprogress', 'En cours'), ('completed', 'Terminée')], default='pending', max_length=15, verbose_name='Statut de la partie')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Début de la partie')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='Fin de la partie')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('kill_multiplier', models.FloatField(default=1.0, verbose_name='Multiplicateur de Kills')),
                ('spawn_location', models.CharField(blank=True, max_length=100, null=True, verbose_name='Lieu de Spawn')),
                ('masterkill_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='api.masterkillevent', verbose_name='Événement Masterkill')),
            ],
            options={
                'verbose_name': 'Partie',
                'verbose_name_plural': 'Parties',
                'ordering': ['masterkill_event', 'game_number'],
                'unique_together': {('masterkill_event', 'game_number')},
            },
        ),
        migrations.CreateModel(
            name='RedeployEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Horodatage')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redeploy_events', to='api.game', verbose_name='Partie Concernée')),
                ('redeployed_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='was_redeployed_by_log', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur redéployé')),
                ('redeployer_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_redeploys', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur qui redéploie')),
            ],
            options={
                'verbose_name': 'Événement de Redéploiement',
                'verbose_name_plural': 'Événements de Redéploiement',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ReviveEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Horodatage')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revive_events', to='api.game', verbose_name='Partie Concernée')),
                ('revived_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='was_revived_events', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur réanimé')),
                ('reviver_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revives_performed', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur qui réanime')),
            ],
            options={
                'verbose_name': 'Événement de Réanimation',
                'verbose_name_plural': 'Événements de Réanimation',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GamePlayerStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kills', models.PositiveIntegerField(default=0, verbose_name='Kills')),
                ('deaths', models.PositiveIntegerField(default=0, verbose_name='Morts')),
                ('assists', models.PositiveIntegerField(default=0, verbose_name='Assistances')),
                ('revives_done', models.PositiveIntegerField(default=0, verbose_name='Réanimations effectuées')),
                ('gulag_status', models.CharField(choices=[('not_played', 'Fermeture'), ('won', 'Gagné'), ('lost', 'Perdu')], default='not_played', max_length=10, verbose_name='Résultat Goulag')),
                ('times_executed_enemy', models.PositiveIntegerField(default=0, verbose_name='Exécutions sur ennemi')),
                ('times_got_executed', models.PositiveIntegerField(default=0, verbose_name='Exécutions subies')),
                ('rage_quit', models.BooleanField(default=False, verbose_name='A quitté en cours (Rage Quit)')),
                ('times_redeployed_by_teammate', models.PositiveIntegerField(default=0, verbose_name='Redéployé par coéquipier')),
                ('score_in_game', models.IntegerField(default=0, verbose_name='Score pour cette partie')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='api.game', verbose_name='Partie')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur Joueur')),
            ],
            options={
                'verbose_name': 'Statistique Utilisateur par Partie',
                'verbose_name_plural': 'Statistiques Utilisateurs par Partie',
                'unique_together': {('game', 'player')},
            },
        ),
    ]
